/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package cubizer;

import java.awt.Color;
import java.awt.Component;
import java.util.ArrayList;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JList;

/**
 *
 * @author rnagel
 */
public class ColorConversionDialog extends javax.swing.JDialog implements ShapeDialog{
    private Result result = Result.CANCEL;

    
    /**
     * Creates new form ConstructLineDialog
     */
    public ColorConversionDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.setLocationRelativeTo(null);
        changeFromColors();
        lblToColor.setText(pnlColorChoice.getBackground().toString());
    }

    private void changeFromColors()
    {
        ArrayList<Color> colors = getColorsInScope();        
        DefaultListModel<Color> model = new DefaultListModel<>();
        DefaultListCellRenderer renderer = new DefaultListCellRenderer(){
            @Override
            public Component getListCellRendererComponent(JList jlist, Object o, int i, boolean bln, boolean bln1) {
                JLabel comp = (JLabel)super.getListCellRendererComponent(jlist, o, i, bln, bln1);
                Color color = (Color)o;
                comp.setForeground(color);
                return comp;
            }
            
        };     
        lstFromColors.setCellRenderer(renderer);
        lstFromColors.setModel(model);
        for (int c = 0; c < colors.size(); c++)
        {
            model.addElement(colors.get(c));
        }        
    }
    
    private ArrayList<Color> getColorsInScope()
    {
        ArrayList<Color> colors = new ArrayList<>();
        
        if (rdoCurrentModel.isSelected())
        {
            if (Global.CurrentModel == null)
                return null;
            else
            {
                for (int c = 0; c < Global.CurrentModel.getCubes().size(); c++)
                {
                    if (!colors.contains(Global.CurrentModel.getCubes().get(c).getFaceColor()))
                        colors.add(Global.CurrentModel.getCubes().get(c).getFaceColor());
                }
            }
        } else if (rdoCurrentAndSubmodels.isSelected())
        {
            if (Global.CurrentModel == null)
                return null;
            else
            {
                getColorsRecursively(colors, Global.CurrentModel);
            }
        } else
        {
            for (int c = 0; c < Global.AllCubes.size(); c++)
            {
                if (!colors.contains(Global.AllCubes.get(c).getFaceColor()))
                    colors.add(Global.AllCubes.get(c).getFaceColor());
            }
        }
        return colors;
    }
    
    private void getColorsRecursively(ArrayList<Color> colors, Model3d model)
    {
        for (int c = 0; c < model.getCubes().size(); c++)
        {
            if (!colors.contains(model.getCubes().get(c).getFaceColor()))
                colors.add(model.getCubes().get(c).getFaceColor());
        }
        ArrayList<Model3d> submodels = Global.getSubmodelsForParent(model);
        for (int m = 0; m < submodels.size(); m++)
        {
            getColorsRecursively(colors, submodels.get(m));
        }
    }
    
    
    private ArrayList<Cube> getCubesInScope()
    {
        ArrayList<Cube> cubes = new ArrayList<>();
        
        if (rdoCurrentModel.isSelected())
        {
            if (Global.CurrentModel == null)
                return null;
            else
            {
                return Global.CurrentModel.getCubes();
            }
        } else if (rdoCurrentAndSubmodels.isSelected())
        {
            if (Global.CurrentModel == null)
                return null;
            else
            {
                getCubesRecursively(cubes, Global.CurrentModel);
                return cubes;
            }
        } else
        {
            return Global.AllCubes;
        }
    }
    
    private void getCubesRecursively(ArrayList<Cube> cubes, Model3d model)
    {
        for (int c = 0; c < model.getCubes().size(); c++)
        {
            if (!cubes.contains(model.getCubes().get(c)))
                cubes.add(model.getCubes().get(c));
        }
        ArrayList<Model3d> submodels = Global.getSubmodelsForParent(model);
        for (int m = 0; m < submodels.size(); m++)
        {
            getCubesRecursively(cubes, submodels.get(m));
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgpScope = new javax.swing.ButtonGroup();
        btnOk = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        pnlFromColor = new javax.swing.JPanel();
        scpFromColors = new javax.swing.JScrollPane();
        lstFromColors = new javax.swing.JList();
        pnlToColor = new javax.swing.JPanel();
        btnChooseColor = new javax.swing.JButton();
        lblToColor = new javax.swing.JLabel();
        pnlColorChoice = new javax.swing.JPanel();
        lblArrow = new javax.swing.JLabel();
        pnlOptions = new javax.swing.JPanel();
        pnlScope = new javax.swing.JPanel();
        rdoCurrentModel = new javax.swing.JRadioButton();
        rdoCurrentAndSubmodels = new javax.swing.JRadioButton();
        rdoAllCubes = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Construct Line");

        btnOk.setText("Ok");
        btnOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOkActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        pnlFromColor.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "From Color", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        scpFromColors.setViewportView(lstFromColors);

        javax.swing.GroupLayout pnlFromColorLayout = new javax.swing.GroupLayout(pnlFromColor);
        pnlFromColor.setLayout(pnlFromColorLayout);
        pnlFromColorLayout.setHorizontalGroup(
            pnlFromColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFromColorLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scpFromColors, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlFromColorLayout.setVerticalGroup(
            pnlFromColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFromColorLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scpFromColors, javax.swing.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE)
                .addContainerGap())
        );

        pnlToColor.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "To Color", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        btnChooseColor.setText("Choose Color");
        btnChooseColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseColorActionPerformed(evt);
            }
        });

        lblToColor.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblToColor.setText("(0,0,0)");

        pnlColorChoice.setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout pnlColorChoiceLayout = new javax.swing.GroupLayout(pnlColorChoice);
        pnlColorChoice.setLayout(pnlColorChoiceLayout);
        pnlColorChoiceLayout.setHorizontalGroup(
            pnlColorChoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        pnlColorChoiceLayout.setVerticalGroup(
            pnlColorChoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout pnlToColorLayout = new javax.swing.GroupLayout(pnlToColor);
        pnlToColor.setLayout(pnlToColorLayout);
        pnlToColorLayout.setHorizontalGroup(
            pnlToColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlToColorLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlToColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnChooseColor, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                    .addComponent(lblToColor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlColorChoice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlToColorLayout.setVerticalGroup(
            pnlToColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlToColorLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnChooseColor, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblToColor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlColorChoice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        lblArrow.setFont(new java.awt.Font("Arial Black", 1, 24)); // NOI18N
        lblArrow.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblArrow.setText("→");

        pnlOptions.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        pnlScope.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Scope", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        bgpScope.add(rdoCurrentModel);
        rdoCurrentModel.setSelected(true);
        rdoCurrentModel.setText("Current Model");
        rdoCurrentModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoCurrentModelActionPerformed(evt);
            }
        });

        bgpScope.add(rdoCurrentAndSubmodels);
        rdoCurrentAndSubmodels.setText("Current Model + Submodels");
        rdoCurrentAndSubmodels.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoCurrentAndSubmodelsActionPerformed(evt);
            }
        });

        bgpScope.add(rdoAllCubes);
        rdoAllCubes.setText("All Cubes");
        rdoAllCubes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoAllCubesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlScopeLayout = new javax.swing.GroupLayout(pnlScope);
        pnlScope.setLayout(pnlScopeLayout);
        pnlScopeLayout.setHorizontalGroup(
            pnlScopeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlScopeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlScopeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rdoCurrentModel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rdoCurrentAndSubmodels, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                    .addComponent(rdoAllCubes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlScopeLayout.setVerticalGroup(
            pnlScopeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlScopeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rdoCurrentModel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdoCurrentAndSubmodels)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdoAllCubes)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlOptionsLayout = new javax.swing.GroupLayout(pnlOptions);
        pnlOptions.setLayout(pnlOptionsLayout);
        pnlOptionsLayout.setHorizontalGroup(
            pnlOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlOptionsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlScope, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlOptionsLayout.setVerticalGroup(
            pnlOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlOptionsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlScope, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlOptions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnOk, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnCancel, javax.swing.GroupLayout.DEFAULT_SIZE, 549, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnlFromColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblArrow, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnlToColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblArrow, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlFromColor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlToColor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlOptions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnOk)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCancel)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.result = Result.CANCEL;
        setVisible(false);
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOkActionPerformed
        this.result = Result.OK;
        
        Color fromColor = getFromColor();
        Color toColor = getToColor();
        
        ArrayList<Cube> cubes = getCubesInScope();
        for (int c = 0; c < cubes.size(); c++)
        {
            if (cubes.get(c).getFaceColor().equals(fromColor))
            {
                cubes.get(c).setFaceColor(toColor);
            }
        }
        
        setVisible(false);
    }//GEN-LAST:event_btnOkActionPerformed

    private void rdoCurrentModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoCurrentModelActionPerformed
        changeFromColors();
    }//GEN-LAST:event_rdoCurrentModelActionPerformed

    private void rdoCurrentAndSubmodelsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoCurrentAndSubmodelsActionPerformed
        changeFromColors();
    }//GEN-LAST:event_rdoCurrentAndSubmodelsActionPerformed

    private void rdoAllCubesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoAllCubesActionPerformed
        changeFromColors();
    }//GEN-LAST:event_rdoAllCubesActionPerformed

    private void btnChooseColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseColorActionPerformed
        ColorDialog dlg = new ColorDialog(this, true);
        dlg.setChosenColor(pnlColorChoice.getBackground());
        dlg.setVisible(true);
        Color color = dlg.getChosenColor();
        if (color != null)
        {
            pnlColorChoice.setBackground(color);
            lblToColor.setText(color.toString());
        }
    }//GEN-LAST:event_btnChooseColorActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgpScope;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnChooseColor;
    private javax.swing.JButton btnOk;
    private javax.swing.JLabel lblArrow;
    private javax.swing.JLabel lblToColor;
    private javax.swing.JList lstFromColors;
    private javax.swing.JPanel pnlColorChoice;
    private javax.swing.JPanel pnlFromColor;
    private javax.swing.JPanel pnlOptions;
    private javax.swing.JPanel pnlScope;
    private javax.swing.JPanel pnlToColor;
    private javax.swing.JRadioButton rdoAllCubes;
    private javax.swing.JRadioButton rdoCurrentAndSubmodels;
    private javax.swing.JRadioButton rdoCurrentModel;
    private javax.swing.JScrollPane scpFromColors;
    // End of variables declaration//GEN-END:variables

    @Override
    public Result getDialogResult() {
        return this.result;
    }
    
    public Color getFromColor()
    {
        return (Color)lstFromColors.getSelectedValue();
    }
    
    public Color getToColor()
    {
        return pnlColorChoice.getBackground();
    }
}
