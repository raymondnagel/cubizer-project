/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package cubizer;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.SwingWorker;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author Raymond
 */
public class AnimationDialog extends javax.swing.JDialog {

    private Animation animation = null;    
    private SwingWorker updateThread = null;
    private ArrayList<BufferedImage> frames = null;
    private int frameIndex = 0;
    
    /**
     * Creates new form AnimationDialog
     */
    public AnimationDialog(java.awt.Frame parent, boolean modal, Animation anim) {
        super(parent, modal);
        initComponents();
        picAnimDisplay.setLayoutMode(PictureFrame.ImageLayoutModes.CENTER);
        this.animation = anim;
        ArrayList<Direction> dirs = anim.getDirections();
        DefaultListModel model = new DefaultListModel();
        for (int d = 0; d < dirs.size(); d++)
        {
            model.addElement(dirs.get(d));
        }
        lstDirections.setModel(model);
    }

    private void start()
    {
        frameIndex = 0;
        btnPlay.setEnabled(false);
        btnStop.setEnabled(true);
        updateThread = new SwingWorker()
        {
            @Override
            protected Object doInBackground() throws Exception {
                do
                {
                    Thread.sleep((long)spnDelay.getValue());
                    update();
                } while (btnStop.isEnabled());
                return null;
            }        
        };
        updateThread.execute();
    }
    private void stop()
    {
        btnPlay.setEnabled(true);
        btnStop.setEnabled(false);       
        frameIndex = 0;
    }
    
    private void update()
    {
        frameIndex++;
        if (frameIndex >= animation.getPoseCount())
            frameIndex = 0;
        picAnimDisplay.setImage(frames.get(frameIndex));
        picAnimDisplay.repaint();
    }
    
    private void createFrames()
    {
        Direction dir = (Direction)lstDirections.getSelectedValue();
        frames = new ArrayList<>();
        for (int p = 0; p < animation.getPoseCount(); p++)
        {
            BufferedImage frame = animation.createFrame(dir.getName(), p);
            frames.add(frame);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlOptions = new javax.swing.JPanel();
        spnDelay = new javax.swing.JSpinner();
        lblDelay = new javax.swing.JLabel();
        btnBackgroundColor = new javax.swing.JButton();
        btnPlay = new javax.swing.JButton();
        btnStop = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();
        btnExportAnimation = new javax.swing.JButton();
        pnlDirections = new javax.swing.JPanel();
        scpDirections = new javax.swing.JScrollPane();
        lstDirections = new javax.swing.JList();
        picAnimDisplay = new cubizer.PictureFrame();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        spnDelay.setModel(new javax.swing.SpinnerNumberModel(Long.valueOf(200L), Long.valueOf(1L), Long.valueOf(1000L), Long.valueOf(1L)));

        lblDelay.setText("Speed (delay):");

        btnBackgroundColor.setText("Background Color");
        btnBackgroundColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackgroundColorActionPerformed(evt);
            }
        });

        btnPlay.setText("Play");
        btnPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlayActionPerformed(evt);
            }
        });

        btnStop.setText("Stop");
        btnStop.setEnabled(false);
        btnStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopActionPerformed(evt);
            }
        });

        btnClose.setText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        btnExportAnimation.setText("Export Animation");
        btnExportAnimation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportAnimationActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlOptionsLayout = new javax.swing.GroupLayout(pnlOptions);
        pnlOptions.setLayout(pnlOptionsLayout);
        pnlOptionsLayout.setHorizontalGroup(
            pnlOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlOptionsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnBackgroundColor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnlOptionsLayout.createSequentialGroup()
                        .addGroup(pnlOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlOptionsLayout.createSequentialGroup()
                                .addComponent(lblDelay, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spnDelay, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlOptionsLayout.createSequentialGroup()
                                .addComponent(btnPlay)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnStop)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(btnClose, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnExportAnimation, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlOptionsLayout.setVerticalGroup(
            pnlOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlOptionsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDelay)
                    .addComponent(spnDelay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnBackgroundColor)
                .addGap(18, 18, 18)
                .addGroup(pnlOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPlay)
                    .addComponent(btnStop))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnExportAnimation)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnClose)
                .addContainerGap())
        );

        pnlDirections.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Directions", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        lstDirections.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstDirectionsValueChanged(evt);
            }
        });
        scpDirections.setViewportView(lstDirections);

        javax.swing.GroupLayout pnlDirectionsLayout = new javax.swing.GroupLayout(pnlDirections);
        pnlDirections.setLayout(pnlDirectionsLayout);
        pnlDirectionsLayout.setHorizontalGroup(
            pnlDirectionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDirectionsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scpDirections, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlDirectionsLayout.setVerticalGroup(
            pnlDirectionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDirectionsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scpDirections, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                .addContainerGap())
        );

        picAnimDisplay.setBackground(new java.awt.Color(0, 0, 0));
        picAnimDisplay.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        picAnimDisplay.setPreferredSize(new java.awt.Dimension(200, 200));

        javax.swing.GroupLayout picAnimDisplayLayout = new javax.swing.GroupLayout(picAnimDisplay);
        picAnimDisplay.setLayout(picAnimDisplayLayout);
        picAnimDisplayLayout.setHorizontalGroup(
            picAnimDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 196, Short.MAX_VALUE)
        );
        picAnimDisplayLayout.setVerticalGroup(
            picAnimDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 196, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlDirections, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(picAnimDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addComponent(pnlOptions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(picAnimDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlDirections, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(pnlOptions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackgroundColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackgroundColorActionPerformed
        ColorDialog dlg = new ColorDialog(this, true);
        dlg.setChosenColor(picAnimDisplay.getBackground());
        dlg.setVisible(true);
        Color color = dlg.getChosenColor();
        if (color != null)
        {
            picAnimDisplay.setBackground(color);
        }
    }//GEN-LAST:event_btnBackgroundColorActionPerformed

    private void btnPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlayActionPerformed
        start();
    }//GEN-LAST:event_btnPlayActionPerformed

    private void btnStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopActionPerformed
        stop();
    }//GEN-LAST:event_btnStopActionPerformed

    private void lstDirectionsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstDirectionsValueChanged
        stop();
        createFrames();
    }//GEN-LAST:event_lstDirectionsValueChanged

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        stop();
        setVisible(false);
    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnExportAnimationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportAnimationActionPerformed
        JFileChooser saveChooser = new QuickFileChooser();
        saveChooser.setCurrentDirectory(CubizerFrame.SPRITE_DIR);
        saveChooser.setFileFilter(new FileFilter() {
            @Override
            public boolean accept(File file) {
                return file.getName().toUpperCase().endsWith(".PNG");
            }
            @Override
            public String getDescription() {
                return "PNG Images (*.png)";
            }
        });
        File saveFile = new File(saveChooser.getCurrentDirectory(), Global.CurrentModel.getName() + ".png");
        saveChooser.setSelectedFile(saveFile);
        saveChooser.showSaveDialog(this);
        saveFile = saveChooser.getSelectedFile();        
        if (saveFile != null)
        {
            int spriteWidth = frames.get(0).getWidth();
            int spriteHeight = frames.get(0).getHeight();
            BufferedImage animImg = new BufferedImage(spriteWidth*frames.size(), spriteHeight, BufferedImage.TYPE_INT_ARGB);
            Graphics g = animImg.getGraphics();
            for (int f = 0; f < frames.size(); f++)
            {
                g.drawImage(frames.get(f), spriteWidth*f, 0, this);
            }
            try {
                ImageIO.write(animImg, "PNG", saveFile);
            } catch (IOException ex) {
                Logger.getLogger(AnimationDialog.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnExportAnimationActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBackgroundColor;
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnExportAnimation;
    private javax.swing.JButton btnPlay;
    private javax.swing.JButton btnStop;
    private javax.swing.JLabel lblDelay;
    private javax.swing.JList lstDirections;
    private cubizer.PictureFrame picAnimDisplay;
    private javax.swing.JPanel pnlDirections;
    private javax.swing.JPanel pnlOptions;
    private javax.swing.JScrollPane scpDirections;
    private javax.swing.JSpinner spnDelay;
    // End of variables declaration//GEN-END:variables
}
